generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
    id            String        @id @default(uuid())
    username      String?       @unique
    name          String?       
    email         String        @unique
    password      String?
    provider      AuthProvider
    rating        Int           @default(800)
    gamesAsWhite  Game[]        @relation("GamesAsWhite")
    gamesAsBlack  Game[]        @relation("GamesAsBlack")
    createdAt     DateTime      @default(now())
    lastLogin     DateTime?

  @@index([rating])
}

model Game {
    id              String       @id @default(uuid())
    whitePlayerId   String
    blackPlayerId   String
    whitePlayer     User       @relation("GamesAsWhite", fields: [whitePlayerId], references: [id])
    blackPlayer     User       @relation("GamesAsBlack", fields: [blackPlayerId], references: [id])
    status          GameStatus
    result          GameResult?
    timeControl     TimeControl
    startingFen     String       @default("rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1")
    currentFen      String?
    startAt         DateTime     @default(now())
    endAt           DateTime?
    moves           Move[]
    opening         String?
    event           String?

    @@index([status, result])
}

model Move {
    id          String  @id @default(uuid())
    game        Game    @relation(fields: [gameId], references: [id])
    gameId      String
    moveNumber  Int
    from        String
    to          String
    comments    String?
    before      String
    after       String
    timeTaken   Int?     @default(0)
    createdAt   DateTime @default(now())
    san         String?   
}

enum GameStatus {
    IN_PROGRESS
    COMPLETED
    ABANDONED
    TIME_UP
    PLAYER_EXIT
}

enum GameResult {
    BLACK_WINS
    WHITE_WINS
    DRAW
}

enum TimeControl {
    CLASSICAL
    RAPID
    BLITZ
    BULLET
}

enum AuthProvider {
    GOOGLE
    EMAIL
    GUEST
}